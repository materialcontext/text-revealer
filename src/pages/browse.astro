---
import MainLayout from '../layouts/MainLayout.astro';
---

<MainLayout title="Text Reveal - Browse Files">
  <div class="container browse-container">
    <h1>Browse Files</h1>

    <div class="browse-actions">
      <button id="clear-data" class="clear-button">Clear All Data</button>
    </div>

    <div id="file-browser" class="file-browser">
      <p>Loading files...</p>
    </div>
  </div>
</MainLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    loadFiles();

    // Add event listener for clear button
    document.getElementById('clear-data').addEventListener('click', clearAllData);
  });

  function clearAllData() {
    if (confirm('Are you sure you want to clear all data? This action cannot be undone.')) {
      // Clear all storage
      localStorage.removeItem('text-reveal-files');
      localStorage.removeItem('text-reveal-history');
      localStorage.removeItem('text-reveal-current');

      // Reload the page
      window.location.reload();
    }
  }

  function loadFiles() {
    const browserEl = document.getElementById('file-browser');

    try {
      // Load all files from storage
      const filesJson = localStorage.getItem('text-reveal-files');
      const files = filesJson ? JSON.parse(filesJson) : {};

      if (Object.keys(files).length === 0) {
        browserEl.innerHTML = '<p>No files found. <a href="/">Go back</a> to add some content.</p>';
        return;
      }

      // Sort files by date (newest first)
      const sortedFiles = Object.values(files).sort((a, b) => b.timestamp - a.timestamp);

      // Render the files
      browserEl.innerHTML = `
        <div class="file-grid">
          ${sortedFiles.map(file => renderFileCard(file)).join('')}
        </div>
      `;

      // Add event listeners to buttons
      document.querySelectorAll('.open-button').forEach(button => {
        button.addEventListener('click', function() {
          const fileId = this.getAttribute('data-id');
          openFile(fileId);
        });
      });

      document.querySelectorAll('.delete-button').forEach(button => {
        button.addEventListener('click', function() {
          const fileId = this.getAttribute('data-id');
          deleteFile(fileId);
        });
      });

      document.querySelectorAll('.export-button').forEach(button => {
        button.addEventListener('click', function() {
          const fileId = this.getAttribute('data-id');
          exportFile(fileId);
        });
      });
    } catch (error) {
      console.error('Error loading files:', error);
      browserEl.innerHTML = '<p>Error loading files. <a href="/">Go back</a> to try again.</p>';
    }
  }

  function renderFileCard(file) {
    // Count pages and blanks
    const pageCount = file.content ? file.content.length : 0;

    let blankCount = 0;
    if (file.content) {
      file.content.forEach(page => {
        page.sections.forEach(section => {
          blankCount += section.blankPositions ? section.blankPositions.length : 0;
        });
      });
    }

    // Format date
    const date = new Date(file.timestamp);
    const dateFormatted = date.toLocaleDateString() + ' ' + date.toLocaleTimeString();

    return `
      <div class="file-card">
        <div class="file-card-header">
          <h3>${file.name}</h3>
          <span class="file-date">${dateFormatted}</span>
        </div>
        <div class="file-card-body">
          <div class="file-stats">
            <span>${pageCount} ${pageCount === 1 ? 'page' : 'pages'}</span>
            <span>${blankCount} ${blankCount === 1 ? 'blank' : 'blanks'}</span>
          </div>
        </div>
        <div class="file-card-actions">
          <button class="open-button" data-id="${file.id}">Open</button>
          <button class="export-button" data-id="${file.id}">Export</button>
          <button class="delete-button" data-id="${file.id}">Delete</button>
        </div>
      </div>
    `;
  }

  function openFile(fileId) {
    // Set as current file
    localStorage.setItem('text-reveal-current', fileId);

    // Update history
    const historyJson = localStorage.getItem('text-reveal-history');
    const history = historyJson ? JSON.parse(historyJson) : [];

    // Remove if exists
    const index = history.indexOf(fileId);
    if (index !== -1) {
      history.splice(index, 1);
    }

    // Add to front
    history.unshift(fileId);

    // Trim if too long
    if (history.length > 10) {
      history.length = 10;
    }

    localStorage.setItem('text-reveal-history', JSON.stringify(history));

    // Redirect to reader
    window.location.href = '/reader';
  }

  function deleteFile(fileId) {
    if (confirm('Are you sure you want to delete this file?')) {
      // Get all files
      const filesJson = localStorage.getItem('text-reveal-files');
      const files = filesJson ? JSON.parse(filesJson) : {};

      // Delete the file
      if (files[fileId]) {
        delete files[fileId];
        localStorage.setItem('text-reveal-files', JSON.stringify(files));
      }

      // Update history
      const historyJson = localStorage.getItem('text-reveal-history');
      const history = historyJson ? JSON.parse(historyJson) : [];

      const index = history.indexOf(fileId);
      if (index !== -1) {
        history.splice(index, 1);
        localStorage.setItem('text-reveal-history', JSON.stringify(history));
      }

      // Update current file if needed
      if (localStorage.getItem('text-reveal-current') === fileId) {
        if (history.length > 0) {
          localStorage.setItem('text-reveal-current', history[0]);
        } else {
          localStorage.removeItem('text-reveal-current');
        }
      }

      // Reload the page
      loadFiles();
    }
  }

  function exportFile(fileId) {
    // Get the file
    const filesJson = localStorage.getItem('text-reveal-files');
    const files = filesJson ? JSON.parse(filesJson) : {};
    const file = files[fileId];

    if (!file) {
      alert('File not found');
      return;
    }

    // Create a download link
    const blob = new Blob([file.rawContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);

    const a = document.createElement('a');
    a.href = url;
    a.download = file.name;
    document.body.appendChild(a);
    a.click();

    // Cleanup
    setTimeout(() => {
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }, 0);
  }
</script>
